# .github/workflows/aws-deploy.yml

name: Deploy to AWS App Runner

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/aws-deploy.yml'
  # Optional: Allow manual triggering
  workflow_dispatch:

env:
  AWS_REGION: us-east-1  # Change to your preferred AWS region
  ECR_REPOSITORY: employee-onboarding-backend
  APP_RUNNER_SERVICE: employee-onboarding-service

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    
    # These permissions are needed to interact with GitHub's OIDC Token endpoint
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Check if App Runner service exists
      - name: Check if App Runner service exists
        id: check-service
        run: |
          if aws apprunner describe-service --service-name ${{ env.APP_RUNNER_SERVICE }} 2>/dev/null; then
            echo "service_exists=true" >> $GITHUB_OUTPUT
          else
            echo "service_exists=false" >> $GITHUB_OUTPUT
          fi
      
      # Create App Runner service if it doesn't exist
      - name: Create App Runner service
        if: steps.check-service.outputs.service_exists == 'false'
        run: |
          aws apprunner create-service \
            --service-name ${{ env.APP_RUNNER_SERVICE }} \
            --source-configuration '{
              "AuthenticationConfiguration": {
                "AccessRoleArn": "${{ secrets.APP_RUNNER_ACCESS_ROLE_ARN }}"
              },
              "AutoDeploymentsEnabled": true,
              "ImageRepository": {
                "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest",
                "ImageConfiguration": {
                  "Port": "8000",
                  "RuntimeEnvironmentVariables": {
                    "ENVIRONMENT": "production",
                    "SUPABASE_URL": "${{ secrets.SUPABASE_URL }}",
                    "SUPABASE_KEY": "${{ secrets.SUPABASE_KEY }}",
                    "JWT_SECRET": "${{ secrets.JWT_SECRET }}",
                    "ALLOWED_ORIGINS": "${{ secrets.ALLOWED_ORIGINS }}"
                  }
                },
                "ImageRepositoryType": "ECR"
              }
            }' \
            --instance-configuration '{
              "Cpu": "1 vCPU",
              "Memory": "2 GB"
            }' \
            --health-check-configuration '{
              "Path": "/health",
              "Protocol": "HTTP",
              "Timeout": 5,
              "Interval": 10,
              "HealthyThreshold": 2,
              "UnhealthyThreshold": 2
            }' \
            --auto-scaling-configuration-arn "${{ secrets.APP_RUNNER_AUTOSCALING_CONFIG_ARN }}"
      
      # Update existing App Runner service
      - name: Update App Runner service
        if: steps.check-service.outputs.service_exists == 'true'
        run: |
          aws apprunner update-service \
            --service-name ${{ env.APP_RUNNER_SERVICE }} \
            --source-configuration '{
              "AuthenticationConfiguration": {
                "AccessRoleArn": "${{ secrets.APP_RUNNER_ACCESS_ROLE_ARN }}"
              },
              "AutoDeploymentsEnabled": true,
              "ImageRepository": {
                "ImageIdentifier": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
                "ImageConfiguration": {
                  "Port": "8000",
                  "RuntimeEnvironmentVariables": {
                    "ENVIRONMENT": "production",
                    "SUPABASE_URL": "${{ secrets.SUPABASE_URL }}",
                    "SUPABASE_KEY": "${{ secrets.SUPABASE_KEY }}",
                    "JWT_SECRET": "${{ secrets.JWT_SECRET }}",
                    "ALLOWED_ORIGINS": "${{ secrets.ALLOWED_ORIGINS }}"
                  }
                },
                "ImageRepositoryType": "ECR"
              }
            }'
      
      - name: Wait for deployment to complete
        run: |
          aws apprunner describe-service --service-name ${{ env.APP_RUNNER_SERVICE }} --query "Service.Status" --output text
          while [[ $(aws apprunner describe-service --service-name ${{ env.APP_RUNNER_SERVICE }} --query "Service.Status" --output text) != "RUNNING" ]]; do
            echo "Waiting for deployment to complete..."
            sleep 30
            aws apprunner describe-service --service-name ${{ env.APP_RUNNER_SERVICE }} --query "Service.Status" --output text
          done
      
      - name: Get App Runner service URL
        id: get-url
        run: |
          SERVICE_URL=$(aws apprunner describe-service --service-name ${{ env.APP_RUNNER_SERVICE }} --query "Service.ServiceUrl" --output text)
          echo "Service URL: https://$SERVICE_URL"
          echo "service_url=https://$SERVICE_URL" >> $GITHUB_OUTPUT
      
      - name: Check deployment health
        run: |
          curl -f https://${{ steps.get-url.outputs.service_url }}/health || exit 1
          echo "Deployment successful and healthy!"